assert(game.PlaceId == 8396586868, "Invalid game")

if not game:IsLoaded() then 
    game.Loaded:Wait()
end 

local Client = game:GetService("Players").LocalPlayer
local foundAnything = ""

local function Teleport() --credits to charwar
    local PlaceID = game.PlaceId
    local AllIDs = {}
    local actualHour = os.date("!*t").hour
    local Deleted = false
    local File = pcall(function()
        AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
    end)
    if not File then
        table.insert(AllIDs, actualHour)
        writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
    end
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
end

local function GrabFruit(Object, Bool)
    if not Bool then task.wait(1) end

    if not Object:IsA("Tool") then return end
    if Object:IsDescendantOf(workspace.Entities) then return end
        
    local BasePart = Object:FindFirstChildWhichIsA("BasePart")
    if not BasePart then return end
    
    local Character = Client.Character or Client.CharacterAdded:Wait()
    local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
    
    local Touch = BasePart:FindFirstChildWhichIsA("TouchTransmitter", true)
    
    repeat task.wait()
        pcall(function()
            HumanoidRootPart.CFrame = BasePart.CFrame
            firetouchinterest(HumanoidRootPart, Touch.Parent, 0)
            firetouchinterest(HumanoidRootPart, Touch.Parent, 1)
        end)
    until not Object:IsDescendantOf(workspace)
end

workspace.DescendantAdded:Connect(GrabFruit)

for _, Child in ipairs(workspace:GetDescendants()) do 
    GrabFruit(Child, true)
end

while task.wait() do
    if not CanServerHop then continue end
    pcall(function()
        Teleport()
        if foundAnything ~= "" then
            Teleport()
        end
    end)
end
